name: build-publish-scan
on: workflow_dispatch
    
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
jobs:
    build-publish-python:
        runs-on: ubuntu-latest
        env:
          OIDC_PROVIDER_NAME: 'marcelo-github'
          DOCKER_REPO: 'marcelo-ga-webgoat-docker-local'
          REPO_RESOLVE_RELEASES: 'marcelo-mvn-remote-webgoat'
          REPO_RESOLVE_SNAPSHOTS: 'marcelo-mvn-remote-webgoat'
          REPO_DEPLOY_RELEASES: 'marcelo-mvn-local-webgoat'
          IMAGE_NAME: 'marcelo-ga-webgoat-image:${{ github.run_number }}'
          JF_URL: https://${{ vars.JF_URL }}/
          JF_PROJECT: ${{ vars.JF_PROJECT }}
          JF_BUILD_NAME: 'marcelo-webgoat-ga-build'
          JF_BUILD_NUMBER: ${{ github.run_number }}

        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}

            - name: Checkout the repository
              uses: actions/checkout@v4
              
            -   name: Set up JDK 21
                uses: actions/setup-java@v4.2.1
                with:
                    distribution: 'temurin'
                    java-version: 21
                    architecture: x64

            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf mvnc --repo-deploy-releases=${{ env.REPO_DEPLOY_RELEASES }} \
                --repo-resolve-releases=${{ env.REPO_RESOLVE_RELEASES }} \
                --repo-deploy-snapshots=${{ env.REPO_RESOLVE_SNAPSHOTS }} \
                --use-wrapper=true

            - name: Run mvn package
              run: |
                jf mvn package -DskipTests=true


            # - name: Set up Docker Buildx
            #   uses: docker/setup-buildx-action@v3

            # - name: Authenticate Docker
            #   uses: docker/login-action@v3
            #   with:
            #     registry: ${{ vars.JF_URL }}
            #     username: ${{ steps.setup-cli.outputs.oidc-user }}
            #     password: ${{ steps.setup-cli.outputs.oidc-token }}


            # - name: Build Docker image
            #   uses: docker/build-push-action@v5
            #   id: build
            #   with:
            #     push: true
            #     platforms: linux/amd64, linux/arm64
            #     tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
            #     provenance: false

            # - name: docker scan
            #   run: |  
            #      jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
            #      jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                   

            # - name: add docker package to build
            #   run: |  
            #      echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" > metadata.json
            #      jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json 

            # - name: publish build info
            #   run: |
            #     jf rt build-collect-env 
            #     jf rt build-add-git
            #     jf rt build-publish

            # - name: build scan
            #   run: |            
            #     jf build-scan