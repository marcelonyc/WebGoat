###############################################
# Read README_JFROG.md for more details
###############################################
name: webgoat-build-linux
on: workflow_dispatch
    
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
jobs:
    build-publish-maven:
        name: ${{ vars.JF_BUILD_NAME }}
        runs-on: webgoat-mac
        env:
          OIDC_PROVIDER_NAME: ${{ vars.OIDC_PROVIDER_NAME }}
          DOCKER_REPO: ${{ vars.DOCKER_REPO }}
          DOCKER_REMOTE: ${{ vars.DOCKER_REMOTE }}
          REPO_RESOLVE_RELEASES: ${{ vars.REPO_RESOLVE_RELEASES }}
          REPO_RESOLVE_SNAPSHOTS: ${{ vars.REPO_RESOLVE_SNAPSHOTS }}
          REPO_DEPLOY_RELEASES: ${{ vars.REPO_DEPLOY_RELEASES }}
          IMAGE_NAME: '${{ vars.IMAGE_NAME }}:${{ github.run_number }}'
          JF_URL: https://${{ vars.JF_URL }}/
          JF_BUILD_NAME: ${{ vars.JF_BUILD_NAME }}
          JF_BUILD_NUMBER: ${{ github.run_number }}

        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4.5.6
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}

            - name: Checkout the repository
              uses: actions/checkout@v4
              
            - name: Set up JDK 21
              uses: actions/setup-java@v4.2.1
              with:
                distribution: 'microsoft'
                java-version: 21
                # architecture: armv7

            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                jf mvnc --repo-deploy-releases=${{ env.REPO_DEPLOY_RELEASES }} \
                --repo-deploy-snapshots=${{ env.REPO_DEPLOY_RELEASES }} \
                --repo-resolve-releases=${{ env.REPO_RESOLVE_RELEASES }} \
                --repo-resolve-snapshots=${{ env.REPO_RESOLVE_SNAPSHOTS }} \
                --use-wrapper=true

            - name: Run mvn install
              run: |
                jf mvn clean install -DskipTests=true

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}              
            
            - name: Build Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                build-args: |
                  JF_URL=${{ vars.JF_URL }}
                  DOCKER_REMOTE=${{ env.DOCKER_REMOTE }}
                push: false
                context: .
                outputs: type=docker
                # platforms: linux/amd64, linux/arm64       
                # tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                provenance: false

            - name: docker push
              run: |  
                 jf docker tag ${{ steps.build.outputs.imageid }} ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 jf docker push ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 # jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}   
                 
            - name: publish build info
              run: |
                jf rt build-add-git
                jf rt build-publish

                
    deply-to-dev-env:
            name: webgoat-release-bundle
            runs-on: webgoat-mac
            needs: [ build-publish-maven ]
            steps:
                # Use the specific setup-cli branch
                - name: Setup JFrog CLI
                  uses: jfrog/setup-jfrog-cli@v4
                  id: setup-cli
                  env:
                    JF_URL: https://${{ vars.JF_URL }}/
                    JF_PROJECT: ${{ vars.JF_PROJECT }}
                  with:
                      oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}

                - name: "Create Release Bundle"
                  run: |
                    curl --location https://${{ vars.JF_URL }}/lifecycle/api/v2/release_bundle?project=${{ vars.JF_PROJECT }} \
                    -X POST \
                    --header "X-JFrog-Signing-Key-Name: ${{ vars.SIGNATURE_KEY_NAME }}" \
                    --header "Authorization: Bearer ${{ steps.setup-cli.outputs.oidc-token }}" \
                    --header "Content-Type: application/json" \
                    --data '{
                        "release_bundle_name": "DVR-Release-Bundle",
                        "release_bundle_version": "${{ github.run_number }}",
                        "skip_docker_manifest_resolution": false,
                        "source_type": "builds",
                        "source": {
                            "builds": [
                                {
                                    "build_repository": "${{ vars.JF_PROJECT }}-build-info",
                                    "build_name": "${{env.JF_BUILD_NAME}}",
                                    "build_number": "${{ env.JF_BUILD_NUMBER }}",
                                    "include_dependencies": false
                                }
                            ]
                        }
                    }'                
